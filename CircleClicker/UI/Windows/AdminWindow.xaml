<Window
    x:Class="CircleClicker.UI.Windows.AdminWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:CircleClicker.UI.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:db="clr-namespace:CircleClicker.Models.Database"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:CircleClicker.Models"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:windows="clr-namespace:CircleClicker.UI.Windows"
    Title="Admin Panel - Circle Clicker"
    Width="1280"
    Height="720"
    d:DataContext="{d:DesignInstance windows:AdminWindow}"
    Closing="Window_Closing"
    Style="{StaticResource WindowStyle}"
    WindowStartupLocation="CenterScreen"
    mc:Ignorable="d">
    <Grid>
        <Button
            Name="btn_sampleData"
            Margin="0"
            HorizontalAlignment="Right"
            VerticalAlignment="Top"
            Panel.ZIndex="1"
            Click="btn_sampleData_Click">
            Load Default Data
        </Button>
        <TabControl SelectedIndex="{Binding CurrentTab, Mode=TwoWay}">
            <TabItem Header="Buildings">
                <DataGrid
                    Name="dg_buildings"
                    AutoGenerateColumns="False"
                    Unloaded="DataGrid_Unloaded">
                    <d:DataGrid.ItemsSource>
                        <x:Array Type="db:Building">
                            <db:Building />
                        </x:Array>
                    </d:DataGrid.ItemsSource>
                    <DataGrid.RowHeaderTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding DataContext.Id, RelativeSource={RelativeSource AncestorType=DataGridRow}}" />
                        </DataTemplate>
                    </DataGrid.RowHeaderTemplate>
                    <d:DataGrid.Columns>
                        <DataGridTextColumn
                            Width="*"
                            Binding="{Binding Name}"
                            Header="Name" />
                        <DataGridTemplateColumn Width="150" Header="Production">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate DataType="db:Building">
                                    <controls:DoubleEntryControl Maximum="{x:Static sys:Double.MaxValue}" Value="{Binding BaseProduction, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Width="150" Header="Cost">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate DataType="db:Building">
                                    <controls:DoubleEntryControl Maximum="{x:Static sys:Double.MaxValue}" Value="{Binding BaseCost, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="CostScaling">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate DataType="db:Building">
                                    <controls:DoubleEntryControl Minimum="1" Value="{Binding CostScaling, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </d:DataGrid.Columns>
                </DataGrid>
            </TabItem>

            <TabItem Header="Upgrades">
                <DataGrid
                    Name="dg_upgrades"
                    d:ItemsSource="{d:SampleData ItemCount=5}"
                    AutoGenerateColumns="False"
                    Unloaded="DataGrid_Unloaded">
                    <DataGrid.RowHeaderTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding DataContext.Id, RelativeSource={RelativeSource AncestorType=DataGridRow}}" />
                        </DataTemplate>
                    </DataGrid.RowHeaderTemplate>
                    <d:DataGrid.Columns>
                        <DataGridTextColumn
                            Width="*"
                            Binding="{Binding Name}"
                            Header="Name" />
                        <DataGridComboBoxColumn
                            Width="200"
                            Header="Requires"
                            ItemsSource="{x:Static models:IReadOnlyDependency.Instances}"
                            SelectedItemBinding="{Binding RequiredDependency}" />
                        <DataGridTemplateColumn Width="150" Header="RequiredAmount">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate DataType="db:Upgrade">
                                    <controls:DoubleEntryControl Maximum="{x:Static sys:Double.MaxValue}" Value="{Binding Requirement, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridComboBoxColumn
                            Width="200"
                            Header="Affects"
                            ItemsSource="{x:Static models:IStat.Instances}"
                            SelectedItemBinding="{Binding AffectedStat}" />
                        <DataGridTemplateColumn Width="75" Header="Effect">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate DataType="db:Upgrade">
                                    <controls:DoubleEntryControl Maximum="{x:Static sys:Double.MaxValue}" Value="{Binding Effect, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridComboBoxColumn
                            Width="200"
                            Header="Currency"
                            ItemsSource="{x:Static models:IDependency.Instances}"
                            SelectedItemBinding="{Binding CurrencyDependency}" />
                        <DataGridTemplateColumn Width="150" Header="Cost">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate DataType="db:Upgrade">
                                    <controls:DoubleEntryControl Maximum="{x:Static sys:Double.MaxValue}" Value="{Binding Cost, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </d:DataGrid.Columns>
                </DataGrid>
            </TabItem>

            <TabItem Header="Variables">
                <DataGrid
                    Name="dg_variables"
                    AutoGenerateColumns="False"
                    CanUserAddRows="False"
                    CanUserDeleteRows="False">
                    <d:DataGrid.ItemsSource>
                        <x:Array Type="db:Variable">
                            <db:Variable Name="Stat.CirclesPerClick.BaseValue" Value="1" />
                        </x:Array>
                    </d:DataGrid.ItemsSource>
                    <DataGrid.Columns>
                        <DataGridTextColumn
                            Binding="{Binding Name}"
                            Header="Name"
                            IsReadOnly="True" />
                        <DataGridTemplateColumn Header="Value">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate DataType="db:Variable">
                                    <controls:DoubleEntryControl Maximum="{x:Static sys:Double.MaxValue}" Value="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>

                </DataGrid>
            </TabItem>

            <TabItem Header="Save">
                <WrapPanel
                    Name="wp_save"
                    ItemWidth="250"
                    Orientation="Vertical">
                    <d:WrapPanel.Children>
                        <StackPanel>
                            <Label>Circles</Label>
                            <controls:DoubleEntryControl />
                        </StackPanel>
                        <StackPanel>
                            <Label>TotalCircles</Label>
                            <controls:DoubleEntryControl />
                        </StackPanel>
                    </d:WrapPanel.Children>
                </WrapPanel>
            </TabItem>

            <TabItem d:IsSelected="True" Header="Testing">
                <WrapPanel Orientation="Vertical">
                    <Label>
                        Enable button
                    </Label>
                    <CheckBox Name="cb_test_enableButton" />

                    <Label>Button progress</Label>
                    <Slider
                        Name="sl_test_buttonProgress"
                        Maximum="100"
                        Value="50" />

                    <Label>Message box content</Label>
                    <TextBox
                        Name="tbx_test_msgBoxMessage"
                        AcceptsReturn="True"
                        AcceptsTab="True" />

                    <Label>Message box icon</Label>
                    <ComboBox Name="cbx_test_msgBoxIcon" SelectedValuePath="Content">
                        <ComboBoxItem Content="{x:Static MessageBoxImage.None}" IsSelected="True" />
                        <ComboBoxItem Content="{x:Static MessageBoxImage.Information}" />
                        <ComboBoxItem Content="{x:Static MessageBoxImage.Question}" />
                        <ComboBoxItem Content="{x:Static MessageBoxImage.Warning}" />
                        <ComboBoxItem Content="{x:Static MessageBoxImage.Error}" />
                    </ComboBox>

                    <Label>Message box buttons</Label>
                    <ComboBox Name="cbx_test_msgBoxButtons" SelectedValuePath="Content">
                        <ComboBoxItem Content="{x:Static MessageBoxButton.OK}" IsSelected="True" />
                        <ComboBoxItem Content="{x:Static MessageBoxButton.OKCancel}" />
                        <ComboBoxItem Content="{x:Static MessageBoxButton.YesNo}" />
                        <ComboBoxItem Content="{x:Static MessageBoxButton.YesNoCancel}" />
                    </ComboBox>

                    <Label>Message box result</Label>
                    <TextBlock Name="tb_test_msgBoxResult" />

                    <Button
                        Name="btn_test_showMsgBox"
                        Grid.Row="2"
                        Grid.Column="1"
                        Padding="0"
                        HorizontalAlignment="Left"
                        Click="btn_test_showMsgBox_Click"
                        IsEnabled="{Binding IsChecked, ElementName=cb_test_enableButton}">
                        <Button.Resources>
                            <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="Button">
                                <Style.Triggers>
                                    <Trigger Property="IsEnabled" Value="True">
                                        <Setter Property="Background" Value="{StaticResource SquareBrush}" />
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard AutoReverse="True" RepeatBehavior="Forever">
                                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="Background.GradientStops[0].Color" Duration="0:0:2.5">
                                                        <EasingColorKeyFrame KeyTime="0%" Value="{StaticResource DarkSquareColor}">
                                                            <EasingColorKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseInOut" />
                                                            </EasingColorKeyFrame.EasingFunction>
                                                        </EasingColorKeyFrame>
                                                        <EasingColorKeyFrame KeyTime="100%" Value="{StaticResource SquareColor}">
                                                            <EasingColorKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseInOut" />
                                                            </EasingColorKeyFrame.EasingFunction>
                                                        </EasingColorKeyFrame>
                                                    </ColorAnimationUsingKeyFrames>
                                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="Background.GradientStops[1].Color" Duration="0:0:2.5">
                                                        <EasingColorKeyFrame KeyTime="0%" Value="{StaticResource SquareColor}">
                                                            <EasingColorKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseInOut" />
                                                            </EasingColorKeyFrame.EasingFunction>
                                                        </EasingColorKeyFrame>
                                                        <EasingColorKeyFrame KeyTime="100%" Value="{StaticResource BrightAccentColor}">
                                                            <EasingColorKeyFrame.EasingFunction>
                                                                <QuadraticEase EasingMode="EaseInOut" />
                                                            </EasingColorKeyFrame.EasingFunction>
                                                        </EasingColorKeyFrame>
                                                    </ColorAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Resources>

                        <Grid>
                            <ProgressBar
                                Height="Auto"
                                Margin="0"
                                Foreground="{StaticResource SquareBrush}"
                                Visibility="{Binding IsChecked, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=Collapsed;Visible, FallbackValue=Visible, ElementName=cb_test_enableButton}"
                                Value="{Binding Value, ElementName=sl_test_buttonProgress}" />
                            <TextBlock
                                Padding="16,8"
                                VerticalAlignment="Center"
                                Text="Show MessageBoxEx" />
                        </Grid>
                    </Button>
                </WrapPanel>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
